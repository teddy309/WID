{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"DL_Lab9_LSTM","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyN2HwX80LQFyCiX7gApe7+j"},"kernelspec":{"name":"python3","display_name":"Python 3"}},"cells":[{"cell_type":"markdown","metadata":{"id":"BSTapPGfm3Se","colab_type":"text"},"source":["**201533661 이승수's DeepLearning Lab9: LSTM**"]},{"cell_type":"code","metadata":{"id":"7q7b4Mp4uhzz","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":125},"executionInfo":{"status":"ok","timestamp":1593090714035,"user_tz":-540,"elapsed":21225,"user":{"displayName":"Seungsoo Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj1uuRhx1gX7RpM4meINkxmOV3SaJzuKi1t8THz=s64","userId":"15738127024040559934"}},"outputId":"f778bdbe-b1e0-4ce7-844c-457609fa328d"},"source":["from google.colab import drive\n","drive.mount('/content/gdrive',force_remount=True)"],"execution_count":1,"outputs":[{"output_type":"stream","text":["Go to this URL in a browser: https://accounts.google.com/o/oauth2/auth?client_id=947318989803-6bn6qk8qdgf4n4g3pfee6491hc0brc4i.apps.googleusercontent.com&redirect_uri=urn%3aietf%3awg%3aoauth%3a2.0%3aoob&response_type=code&scope=email%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdocs.test%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive%20https%3a%2f%2fwww.googleapis.com%2fauth%2fdrive.photos.readonly%20https%3a%2f%2fwww.googleapis.com%2fauth%2fpeopleapi.readonly\n","\n","Enter your authorization code:\n","··········\n","Mounted at /content/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"7FWg7OHfu9as","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593090716353,"user_tz":-540,"elapsed":23539,"user":{"displayName":"Seungsoo Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj1uuRhx1gX7RpM4meINkxmOV3SaJzuKi1t8THz=s64","userId":"15738127024040559934"}}},"source":["import torch\n","import torch.nn as nn\n","import torch.optim as optim\n","import numpy as np"],"execution_count":2,"outputs":[]},{"cell_type":"markdown","metadata":{"id":"gYsQtRIl8xRM","colab_type":"text"},"source":["Gloabl Variables & data"]},{"cell_type":"code","metadata":{"id":"t_KThN6PvAzV","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593090716355,"user_tz":-540,"elapsed":23538,"user":{"displayName":"Seungsoo Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj1uuRhx1gX7RpM4meINkxmOV3SaJzuKi1t8THz=s64","userId":"15738127024040559934"}}},"source":["chars = \"abcdefghijklmnopqrstuvwxyz\"\n","char_list = [i for i in chars]\n","n_letters = len(char_list)\n","\n","n_layers = 1\n","\n","five_words = ['basic','beach','below','black','brown','carry','cream','drink','error','event','exist','first','funny','guess','human','image','large','magic','mouse','night','noise','ocean','often','order','peace','phone','print','quiet','reach','rough','round','scene','score','sense','skill','sleep','small','storm','table','think','touch','twice','until','upset','voice','waste','watch','white','woman','young']\n","n_five_words = len(five_words) #50\n","\n","sequence_length = 4"],"execution_count":3,"outputs":[]},{"cell_type":"code","metadata":{"id":"ILN72yTlvMRa","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593090716356,"user_tz":-540,"elapsed":23536,"user":{"displayName":"Seungsoo Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj1uuRhx1gX7RpM4meINkxmOV3SaJzuKi1t8THz=s64","userId":"15738127024040559934"}}},"source":["def word_to_onehot(string): #change \n","    one_hot = np.array([]).reshape(0,n_letters)\n","    for i in string:\n","        idx = char_list.index(i)\n","        zero = np.zeros(shape=n_letters, dtype=int)\n","        zero[idx] = 1\n","        one_hot = np.vstack([one_hot, zero])\n","    return one_hot\n","\n","def onehot_to_word(onehot_1):\n","    onehot = torch.Tensor.numpy(onehot_1)\n","    return char_list[onehot.argmax()]\n","    "],"execution_count":4,"outputs":[]},{"cell_type":"code","metadata":{"id":"5OHhpLLSQDu2","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593090716357,"user_tz":-540,"elapsed":23535,"user":{"displayName":"Seungsoo Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj1uuRhx1gX7RpM4meINkxmOV3SaJzuKi1t8THz=s64","userId":"15738127024040559934"}}},"source":["class myRNN(nn.Module):\n","    def __init__(self, input_size, hidden_size, num_layer):\n","        super(myRNN,  self).__init__()\n","        self.input_size = input_size\n","        self.hidden_size = hidden_size\n","        self.num_layer = num_layer\n","        self.rnn = nn.RNN(input_size = input_size,hidden_size=hidden_size, num_layers=num_layer)\n","\n","    def forward(self, x, hidden):\n","        out, hidden = self.rnn(x, hidden)\n","        return out, hidden\n","\n","    def init_hidden(self):\n","        return torch.zeros(self.num_layer, 1, self.hidden_size)\n"],"execution_count":5,"outputs":[]},{"cell_type":"code","metadata":{"id":"Z2vzz-lDaWZK","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1593090716358,"user_tz":-540,"elapsed":23533,"user":{"displayName":"Seungsoo Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj1uuRhx1gX7RpM4meINkxmOV3SaJzuKi1t8THz=s64","userId":"15738127024040559934"}}},"source":["class myLSTM(nn.Module):\n","  def __init():\n","    super(myLSTM, self).__init__()\n","    print('')\n","\n","  def forward(self,x,hidden):\n","    out,hidden=self.rnn(x,hidden)\n","    return out, hidden\n","  \n","  def init_hidden(self):\n","    return torch.zeros(self.Num_layer,1,self.hidden_size)"],"execution_count":6,"outputs":[]},{"cell_type":"code","metadata":{"id":"BCBWWY6SvA_A","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":1000},"executionInfo":{"status":"ok","timestamp":1593090774428,"user_tz":-540,"elapsed":81597,"user":{"displayName":"Seungsoo Lee","photoUrl":"https://lh3.googleusercontent.com/a-/AOh14Gj1uuRhx1gX7RpM4meINkxmOV3SaJzuKi1t8THz=s64","userId":"15738127024040559934"}},"outputId":"8534e2e4-0500-4268-f7b4-e15a7b58a5b1"},"source":["def main():\n","    n_hidden = 26\n","    lr = 0.001\n","    epochs = 900\n","\n","    model = myRNN(n_letters, n_hidden, n_layers)\n","\n","    loss_func = nn.CrossEntropyLoss()\n","    optimizer = torch.optim.Adam(model.parameters(), lr=lr)\n","    scheduler = optim.lr_scheduler.StepLR(optimizer, step_size = 300, gamma=0.1)\n","\n","    for i in range(epochs):\n","        total_loss = 0\n","        for j in range(n_five_words):\n","            hidden = model.init_hidden()\n","            string = five_words[j]\n","            one_hot = torch.from_numpy(word_to_onehot(string)).type_as(torch.FloatTensor())\n","            model.zero_grad()\n","            hidden = model.init_hidden()\n","            input = one_hot[0:-1]\n","            input = torch.unsqueeze(input, 1)\n","            target = np.argmax(one_hot[1:], axis=1)\n","\n","            output, hidden  = model(input, hidden)\n","            loss = loss_func(output.squeeze(1), target)\n","            loss.backward()\n","            optimizer.step()\n","\n","\n","        if i%10 == 0:\n","             print('epoch%d'%i)\n","             print(loss)\n","\n","        scheduler.step()\n","\n","    torch.save(model.state_dict(), 'trained.pth')\n","    model.load_state_dict(torch.load('trained.pth'))\n","\n","\t\n","    with torch.no_grad():\n","        total = 0\n","        positive = 0\n","        total_text = 0\n","        positive_text = 0\n","        for i in range(n_five_words):\n","            string = five_words[i]\n","            one_hot = torch.from_numpy(word_to_onehot(string)).type_as(torch.FloatTensor())\n","            hidden = model.init_hidden()\n","\n","            input = one_hot[0:-1]\n","            input = torch.unsqueeze(input, 1)\n","            target = np.argmax(one_hot[1:], axis=1)\n","            output, hidden = model(input, hidden)\n","            output = output.squeeze()\n","\n","            output_string = string[0]\n","            for j in range(output.size()[0]):\n","                output_string += onehot_to_word(output[j].data)\n","                total_text += 1\n","                if string[j+1] == output_string[-1]:\n","                    positive_text += 1\n","\n","            total += 1\n","            if string[-1] == output_string[-1]:\n","                positive += 1\n","\n","            print('%d GT:%s OUT:%s'%(i+1, string, output_string))\n","\n","        print('final text accuracy %d/%d (%.4f)'%(positive, total, positive/total))\n","        print('whole text accuracy %d/%d (%.4f)' % (positive_text, total_text, positive_text / total_text))\n","\n","if __name__ == '__main__':\n","    main()"],"execution_count":7,"outputs":[{"output_type":"stream","text":["epoch0\n","tensor(3.3482, grad_fn=<NllLossBackward>)\n","epoch10\n","tensor(2.8614, grad_fn=<NllLossBackward>)\n","epoch20\n","tensor(2.6607, grad_fn=<NllLossBackward>)\n","epoch30\n","tensor(2.5728, grad_fn=<NllLossBackward>)\n","epoch40\n","tensor(2.4857, grad_fn=<NllLossBackward>)\n","epoch50\n","tensor(2.3330, grad_fn=<NllLossBackward>)\n","epoch60\n","tensor(2.1959, grad_fn=<NllLossBackward>)\n","epoch70\n","tensor(2.1087, grad_fn=<NllLossBackward>)\n","epoch80\n","tensor(2.0494, grad_fn=<NllLossBackward>)\n","epoch90\n","tensor(2.0037, grad_fn=<NllLossBackward>)\n","epoch100\n","tensor(1.9655, grad_fn=<NllLossBackward>)\n","epoch110\n","tensor(1.9326, grad_fn=<NllLossBackward>)\n","epoch120\n","tensor(1.9054, grad_fn=<NllLossBackward>)\n","epoch130\n","tensor(1.8798, grad_fn=<NllLossBackward>)\n","epoch140\n","tensor(1.8559, grad_fn=<NllLossBackward>)\n","epoch150\n","tensor(1.8347, grad_fn=<NllLossBackward>)\n","epoch160\n","tensor(1.8151, grad_fn=<NllLossBackward>)\n","epoch170\n","tensor(1.7967, grad_fn=<NllLossBackward>)\n","epoch180\n","tensor(1.7797, grad_fn=<NllLossBackward>)\n","epoch190\n","tensor(1.7634, grad_fn=<NllLossBackward>)\n","epoch200\n","tensor(1.7475, grad_fn=<NllLossBackward>)\n","epoch210\n","tensor(1.7318, grad_fn=<NllLossBackward>)\n","epoch220\n","tensor(1.7179, grad_fn=<NllLossBackward>)\n","epoch230\n","tensor(1.7048, grad_fn=<NllLossBackward>)\n","epoch240\n","tensor(1.6928, grad_fn=<NllLossBackward>)\n","epoch250\n","tensor(1.6829, grad_fn=<NllLossBackward>)\n","epoch260\n","tensor(1.6721, grad_fn=<NllLossBackward>)\n","epoch270\n","tensor(1.6628, grad_fn=<NllLossBackward>)\n","epoch280\n","tensor(1.6548, grad_fn=<NllLossBackward>)\n","epoch290\n","tensor(1.6497, grad_fn=<NllLossBackward>)\n","epoch300\n","tensor(1.6423, grad_fn=<NllLossBackward>)\n","epoch310\n","tensor(1.6390, grad_fn=<NllLossBackward>)\n","epoch320\n","tensor(1.6378, grad_fn=<NllLossBackward>)\n","epoch330\n","tensor(1.6370, grad_fn=<NllLossBackward>)\n","epoch340\n","tensor(1.6362, grad_fn=<NllLossBackward>)\n","epoch350\n","tensor(1.6356, grad_fn=<NllLossBackward>)\n","epoch360\n","tensor(1.6349, grad_fn=<NllLossBackward>)\n","epoch370\n","tensor(1.6342, grad_fn=<NllLossBackward>)\n","epoch380\n","tensor(1.6336, grad_fn=<NllLossBackward>)\n","epoch390\n","tensor(1.6330, grad_fn=<NllLossBackward>)\n","epoch400\n","tensor(1.6324, grad_fn=<NllLossBackward>)\n","epoch410\n","tensor(1.6318, grad_fn=<NllLossBackward>)\n","epoch420\n","tensor(1.6312, grad_fn=<NllLossBackward>)\n","epoch430\n","tensor(1.6306, grad_fn=<NllLossBackward>)\n","epoch440\n","tensor(1.6300, grad_fn=<NllLossBackward>)\n","epoch450\n","tensor(1.6295, grad_fn=<NllLossBackward>)\n","epoch460\n","tensor(1.6289, grad_fn=<NllLossBackward>)\n","epoch470\n","tensor(1.6284, grad_fn=<NllLossBackward>)\n","epoch480\n","tensor(1.6278, grad_fn=<NllLossBackward>)\n","epoch490\n","tensor(1.6273, grad_fn=<NllLossBackward>)\n","epoch500\n","tensor(1.6268, grad_fn=<NllLossBackward>)\n","epoch510\n","tensor(1.6262, grad_fn=<NllLossBackward>)\n","epoch520\n","tensor(1.6257, grad_fn=<NllLossBackward>)\n","epoch530\n","tensor(1.6252, grad_fn=<NllLossBackward>)\n","epoch540\n","tensor(1.6247, grad_fn=<NllLossBackward>)\n","epoch550\n","tensor(1.6242, grad_fn=<NllLossBackward>)\n","epoch560\n","tensor(1.6237, grad_fn=<NllLossBackward>)\n","epoch570\n","tensor(1.6233, grad_fn=<NllLossBackward>)\n","epoch580\n","tensor(1.6228, grad_fn=<NllLossBackward>)\n","epoch590\n","tensor(1.6223, grad_fn=<NllLossBackward>)\n","epoch600\n","tensor(1.6219, grad_fn=<NllLossBackward>)\n","epoch610\n","tensor(1.6218, grad_fn=<NllLossBackward>)\n","epoch620\n","tensor(1.6217, grad_fn=<NllLossBackward>)\n","epoch630\n","tensor(1.6216, grad_fn=<NllLossBackward>)\n","epoch640\n","tensor(1.6216, grad_fn=<NllLossBackward>)\n","epoch650\n","tensor(1.6215, grad_fn=<NllLossBackward>)\n","epoch660\n","tensor(1.6215, grad_fn=<NllLossBackward>)\n","epoch670\n","tensor(1.6214, grad_fn=<NllLossBackward>)\n","epoch680\n","tensor(1.6214, grad_fn=<NllLossBackward>)\n","epoch690\n","tensor(1.6213, grad_fn=<NllLossBackward>)\n","epoch700\n","tensor(1.6212, grad_fn=<NllLossBackward>)\n","epoch710\n","tensor(1.6212, grad_fn=<NllLossBackward>)\n","epoch720\n","tensor(1.6211, grad_fn=<NllLossBackward>)\n","epoch730\n","tensor(1.6211, grad_fn=<NllLossBackward>)\n","epoch740\n","tensor(1.6210, grad_fn=<NllLossBackward>)\n","epoch750\n","tensor(1.6210, grad_fn=<NllLossBackward>)\n","epoch760\n","tensor(1.6210, grad_fn=<NllLossBackward>)\n","epoch770\n","tensor(1.6209, grad_fn=<NllLossBackward>)\n","epoch780\n","tensor(1.6209, grad_fn=<NllLossBackward>)\n","epoch790\n","tensor(1.6208, grad_fn=<NllLossBackward>)\n","epoch800\n","tensor(1.6208, grad_fn=<NllLossBackward>)\n","epoch810\n","tensor(1.6207, grad_fn=<NllLossBackward>)\n","epoch820\n","tensor(1.6207, grad_fn=<NllLossBackward>)\n","epoch830\n","tensor(1.6206, grad_fn=<NllLossBackward>)\n","epoch840\n","tensor(1.6206, grad_fn=<NllLossBackward>)\n","epoch850\n","tensor(1.6205, grad_fn=<NllLossBackward>)\n","epoch860\n","tensor(1.6205, grad_fn=<NllLossBackward>)\n","epoch870\n","tensor(1.6204, grad_fn=<NllLossBackward>)\n","epoch880\n","tensor(1.6204, grad_fn=<NllLossBackward>)\n","epoch890\n","tensor(1.6204, grad_fn=<NllLossBackward>)\n","1 GT:basic OUT:belcc\n","2 GT:beach OUT:beach\n","3 GT:below OUT:beaow\n","4 GT:black OUT:beack\n","5 GT:brown OUT:beoon\n","6 GT:carry OUT:crrry\n","7 GT:cream OUT:crram\n","8 GT:drink OUT:dronk\n","9 GT:error OUT:eaeor\n","10 GT:event OUT:eaent\n","11 GT:exist OUT:eaise\n","12 GT:first OUT:furse\n","13 GT:funny OUT:funny\n","14 GT:guess OUT:guree\n","15 GT:human OUT:honan\n","16 GT:image OUT:imane\n","17 GT:large OUT:large\n","18 GT:magic OUT:magic\n","19 GT:mouse OUT:mause\n","20 GT:night OUT:nanht\n","21 GT:noise OUT:nance\n","22 GT:ocean OUT:oreen\n","23 GT:often OUT:orien\n","24 GT:order OUT:ordee\n","25 GT:peace OUT:prane\n","26 GT:phone OUT:prine\n","27 GT:print OUT:pront\n","28 GT:quiet OUT:quiee\n","29 GT:reach OUT:roach\n","30 GT:rough OUT:rounh\n","31 GT:round OUT:round\n","32 GT:scene OUT:scene\n","33 GT:score OUT:scere\n","34 GT:sense OUT:scnse\n","35 GT:skill OUT:scill\n","36 GT:sleep OUT:sceee\n","37 GT:small OUT:scoll\n","38 GT:storm OUT:scorm\n","39 GT:table OUT:toice\n","40 GT:think OUT:toink\n","41 GT:touch OUT:toinh\n","42 GT:twice OUT:toice\n","43 GT:until OUT:uptol\n","44 GT:upset OUT:upsee\n","45 GT:voice OUT:voice\n","46 GT:waste OUT:wasce\n","47 GT:watch OUT:wasch\n","48 GT:white OUT:waite\n","49 GT:woman OUT:waman\n","50 GT:young OUT:young\n","final text accuracy 43/50 (0.8600)\n","whole text accuracy 136/200 (0.6800)\n"],"name":"stdout"}]}]}